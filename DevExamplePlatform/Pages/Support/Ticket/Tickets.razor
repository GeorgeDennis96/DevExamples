@page "/support/tickets"
@using DevExample.Platform.Services
@using DevExample.Private.Models
@using DevExample.Platform.Shared
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<DashboardContainer ContainerTitle="Support Centre" ContainerDescription="Support requests and ticket management">
    <AuthorizeView>
        <Authorized>
<div class="row-12">
    <div class="col-md-12">
    @if (TicketList != null && TicketList.Count() > 0)
    {
    <div class="float-right p-3">
        <button type="button" class="btn btn-outline-info" @onclick="GoToCreateTicket">Create Ticket</button>
    </div>
<MudTable Items="@TicketList" SortLabel="Sort By" T="TicketModel" Dense="@dense" Bordered="@bordered" Filter="new Func<TicketModel,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Immediate=true Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="width: 30px;">ID</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TicketModel, object>(x=>x.Priority)">Priority</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TicketModel, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh>Last Updated</MudTh>
        <MudTh>Created By</MudTh>
        <MudTh>Viewed By</MudTh>
        <MudTh>Comments</MudTh>
        <MudTh>Manage</MudTh>
    </HeaderContent>
    <RowTemplate Context="tableContext">
    <MudTd Style="padding-right:8px;" DataLabel="ID"><MudTd><MudTooltip Text="Copy Ticket ID"><MudIconButton Size="Size.Small" Class="float-left" Icon="@Icons.TwoTone.Numbers" OnClick="@(() => CopyText(tableContext._id))"></MudIconButton></MudTooltip></MudTd></MudTd>
        <MudTd DataLabel="Subject">@tableContext.Subject</MudTd>
        <MudTd DataLabel="Priority">@tableContext.Priority</MudTd>
        <MudTd DataLabel="Status">@tableContext.Status</MudTd>
        <MudTd DataLabel="Last Updated">@tableContext.LastOpened</MudTd>
        <MudTd DataLabel="Created By">@tableContext.CreatedBy</MudTd>
        <MudTd DataLabel="Viewed By">@tableContext.ViewedBy</MudTd>
        @{
            var commentString = "No Comments";
            
            if (@tableContext.Comments != null)
            {
                if (@tableContext.Comments.Count != 0)
                {
                    commentString = tableContext.Comments.Count().ToString();
                }
            }
        }
        <MudTd DataLabel="Comments">@commentString</MudTd>
        <MudTd DataLabel="Manage"><button type="button" class="btn btn-primary" @onclick="@(() => GoToTicket(tableContext._id))">View</button></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
</div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body ">
                        <p style="text-align:center;">No Tickets could be found. Would you like to create one?</p>
                        <div style="text-align:center;margin-top: 30px;">
                            <button type="button" class="btn btn-outline-info" @onclick="GoToCreateTicket">Create Ticket</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    </div>
</div>
            </Authorized>
        <NotAuthorized>
            <a href="/Account/Login">Log in</a>
        </NotAuthorized>
            </AuthorizeView>
</DashboardContainer>


@code {
    private bool dense = true;
    private bool bordered = false;
    private string searchString1 = "";
    private TicketModel selectedItem1 = null;
    private HashSet<TicketModel> selectedItems = new HashSet<TicketModel>();
    private IEnumerable<TicketModel> TicketList = new List<TicketModel>();
    private string CopiedID;
    private string AccessToken { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userNameIdentifier = state.User.Claims.First(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value;
        if (AccountService.Instance.IsIronMan(userNameIdentifier))
        {
            TicketList = TicketService.Instance.GetAllTickets(userNameIdentifier);
        }
        else
        {
            TicketList = TicketService.Instance.GetAllUserTickets(userNameIdentifier);
        }
        AccessToken = TokenState.AccessToken;
        await base.OnInitializedAsync();
    }

    private void GoToTicket(string ticketId)
    {
        NavManager.NavigateTo("/support/tickets/" + ticketId);
    }

    private void GoToCreateTicket()
    {
        NavManager.NavigateTo("/support/tickets/create");
    }

    private void GoToCreateAdminTicket()
    {
        NavManager.NavigateTo("/admin/support/tickets/create");
    }

    private async Task CopyText(string text)
    {
        await Clipboard.CopyTextToClipboard(JSRuntime, text);
        CopiedID = text;
        Snackbar.Add($"ID: {text} copied to clipboard!", Severity.Success);
    }

    private bool FilterFunc1(TicketModel ticket) => FilterFunc(ticket, searchString1);

    private bool FilterFunc(TicketModel ticket, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (ticket.Subject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ticket._id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ticket.Priority.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ticket.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{ticket.CreatedBy} {ticket.CreatedBy}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
